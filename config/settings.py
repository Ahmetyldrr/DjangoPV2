"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-93e5@eteyt3v2ltol$r4fnznr(3*b9b!sj=sd)&(^trniech05')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = ['apphane.com.tr', 'www.apphane.com.tr', '165.227.130.23', 'localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    
    # Third party apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'channels',
    
    # Custom apps
    'accounts',
    'chat',
    'apps.catalog',
    'apps.releases',
    'apps.requestsapp',
    'apps.pages',
    'apps.careers',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'csp.middleware.CSPMiddleware',  # Temporarily disabled for deployment
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Production PostgreSQL Database
if not DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'fxdb',
            'USER': 'ahmet21',
            'PASSWORD': 'diclem2121.',
            'HOST': '165.227.130.23',
            'PORT': '5432',
            'OPTIONS': {
                'connect_timeout': 10,
            }
        }
    }
else:
    # Development SQLite Database
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'tr'

TIME_ZONE = 'Europe/Istanbul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']

# Production static files
if not DEBUG:
    STATIC_ROOT = '/app/staticfiles'
else:
    STATIC_ROOT = BASE_DIR / 'staticfiles'

# Whitenoise settings
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
if not DEBUG:
    MEDIA_ROOT = '/app/media'
else:
    MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication Settings
AUTH_USER_MODEL = 'accounts.User'
SITE_ID = 1

# Django Allauth Settings
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Updated Allauth Settings (new format)
ACCOUNT_LOGIN_METHODS = ['email']
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
ACCOUNT_EMAIL_VERIFICATION = 'optional'
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_USER_MODEL_EMAIL_FIELD = 'email'

# Google OAuth Settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': '365908773864-nfskddrn8rp0ghqohn553lg4naa70bdf.apps.googleusercontent.com',
            'secret': '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',
            'key': ''
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}

# Channels (WebSocket) Settings
ASGI_APPLICATION = 'config.asgi.application'

# Cache Configuration 
# Test ortamında veya django_redis yoksa dummy cache kullan
REDIS_URL = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')

try:
    import django_redis
    # django_redis mevcutsa Redis cache kullan
    if 'test' in sys.argv or os.environ.get('GITHUB_ACTIONS'):
        # Test ortamında dummy cache kullan
        CACHES = {
            'default': {
                'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
            }
        }
    else:
        # Production/Development ortamında Redis kullan
        CACHES = {
            'default': {
                'BACKEND': 'django_redis.cache.RedisCache',
                'LOCATION': 'redis://redis:6379/1' if not DEBUG else 'redis://127.0.0.1:9379/1',
                'OPTIONS': {
                    'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                }
            }
        }
except ImportError:
    # django_redis mevcut değilse dummy cache kullan
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
        }
    }

# Redis için Channels
if not DEBUG:
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                "hosts": [('redis', 6379)],
            },
        },
    }
else:
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                "hosts": [('127.0.0.1', 9379)],
            },
        },
    }

# Email Settings
if not DEBUG:
    # Production Email Settings
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
else:
    # Development Email Settings
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Contact Settings - Gmail SMTP kullanarak profesyonel e-posta
DEFAULT_FROM_EMAIL = 'Apphane Team <apphane.platform@gmail.com>'  # Gmail üzerinden gönderim
CONTACT_EMAIL = 'apphane.platform@gmail.com'  # İletişim formlarından gelen mesajlar buraya gelecek

# Admin Notification Settings
ADMINS = [
    ('Ahmet Admin', 'apphane.platform@gmail.com'),
    ('Support Team', 'apphane.platform@gmail.com'),
]

MANAGERS = ADMINS  # Managers da aynı email'leri alsın

# Chat ve Mesaj Bildirimleri
CHAT_ADMIN_EMAIL_NOTIFICATIONS = True  # Admin'e yeni mesaj bildirimleri gönder
CHAT_ADMIN_EMAILS = [
    'apphane.platform@gmail.com',
    # Buraya ek admin email'leri eklenebilir
]


# Security Settings for Production
if not DEBUG:
    SECURE_SSL_REDIRECT = os.getenv('SECURE_SSL_REDIRECT', 'True').lower() == 'true'
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # Content Security Policy
    CSP_DEFAULT_SRC = "'self'"
    CSP_SCRIPT_SRC = "'self' 'unsafe-inline' 'unsafe-eval'"
    CSP_STYLE_SRC = "'self' 'unsafe-inline' fonts.googleapis.com"
    CSP_FONT_SRC = "'self' fonts.gstatic.com"
    CSP_IMG_SRC = "'self' data: https:"
    CSP_CONNECT_SRC = "'self'"
    CSP_FRAME_ANCESTORS = "'none'"
    
    # CSRF Settings - HTTPS için True
    CSRF_COOKIE_SECURE = os.getenv('SECURE_SSL_REDIRECT', 'True').lower() == 'true'
    SESSION_COOKIE_SECURE = os.getenv('SECURE_SSL_REDIRECT', 'True').lower() == 'true'


# Logging Configuration
import os

# Logs klasörünü oluştur (eğer yoksa)
LOGS_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOGS_DIR, exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'chat_email': {
            'format': '🔔 {asctime} [{levelname}] {module}: {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGS_DIR, 'django.log'),
            'formatter': 'verbose',
        },
        'chat_email_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGS_DIR, 'chat_emails.log'),
            'formatter': 'chat_email',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],  # Sadece console, dosya problemi yaşanmasın
            'level': 'INFO',
            'propagate': True,
        },
        'chat.email_notifications': {
            'handlers': ['console'],  # Development'ta console yeterli
            'level': 'DEBUG',
            'propagate': False,
        },
        'chat.signals': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.core.mail': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Production'da file logging'i aktif et
if not DEBUG:
    LOGGING['loggers']['django']['handlers'] = ['file', 'console']
    LOGGING['loggers']['chat.email_notifications']['handlers'] = ['chat_email_file', 'console']
    LOGGING['loggers']['chat.signals']['handlers'] = ['chat_email_file', 'console']
    LOGGING['loggers']['django.core.mail']['handlers'] = ['chat_email_file', 'console']
