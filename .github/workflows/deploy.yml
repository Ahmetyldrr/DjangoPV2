name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5


    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Django psycopg2-binary requests django-allauth PyJWT cryptography oauthlib requests-oauthlib python3-openid
        pip install -r requirements.txt || true
    
    - name: Run tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost/test_db
      run: |
        python manage.py test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: 165.227.130.23
        username: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd /var/www/apphane
          
          # Git güncellemesi
          git stash
          git pull origin main
          
          # Nginx-uyumlu Docker Compose kullan (port 9000:9000)
          cp docker-compose-simple.yml docker-compose.yml
          
          # Graceful shutdown (Nginx'i etkilemez)
          docker-compose down --timeout 30
          
          # Cache temizliği (sorun olursa)
          docker system prune -f
          
          # Clean build
          docker-compose build --no-cache web
          
          # Start services
          docker-compose up -d
          
          # Run migrations
          docker-compose exec -T web python manage.py migrate --noinput
          
          # Collect static files
          docker-compose exec -T web python manage.py collectstatic --noinput --clear
          
          # Copy static files to host for Nginx (HTTPS compatibility)
          docker cp apphane_web_1:/app/staticfiles/. /var/www/apphane/staticfiles/ 2>/dev/null || true
          docker cp apphane_web_1:/app/media/. /var/www/apphane/media/ 2>/dev/null || true
    
          
          echo "✅ Deployment completed successfully!"

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notification
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "🚀 Deployment successful! Site is live at https://apphane.com.tr"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi
