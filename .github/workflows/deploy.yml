name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Django psycopg2-binary requests django-allauth PyJWT cryptography oauthlib requests-oauthlib python3-openid
        pip install -r requirements.txt || true
    
    - name: Run tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost/test_db
      run: |
        python manage.py test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: 165.227.130.23
        username: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd /var/www/apphane
          git pull origin main
          
          # Graceful shutdown
          docker-compose down --timeout 30
          
          # Clean build
          docker-compose build --no-cache
          
          # Start services with health checks
          docker-compose up -d
          
          # Wait for services to be healthy
          timeout 300 bash -c 'until docker-compose exec web curl -f http://localhost:9000/health/ > /dev/null 2>&1; do echo "Waiting for web service..."; sleep 5; done'
          
          # Run migrations
          docker-compose exec -T web python manage.py migrate --noinput
          
          # Collect static files
          docker-compose exec -T web python manage.py collectstatic --noinput --clear
          
          # Verify deployment
          curl -f http://localhost:8000/health/ || exit 1
          
          echo "‚úÖ Deployment completed successfully!"

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notification
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "üöÄ Deployment successful! Site is live at http://165.227.130.23:8000"
        else
          echo "‚ùå Deployment failed!"
          exit 1
        fi
